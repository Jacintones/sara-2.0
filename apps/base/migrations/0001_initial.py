# Generated by Django 5.1.9 on 2025-06-02 13:37

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nome Fantasia')),
                ('razao_social', models.CharField(default='', max_length=255, verbose_name='Razão Social')),
                ('cnpj', models.CharField(max_length=18, unique=True, verbose_name='CNPJ')),
                ('endereco_comercial', models.CharField(default='', max_length=255, verbose_name='Endereço Comercial')),
                ('inscricao_estadual', models.CharField(default='', max_length=255, verbose_name='Inscrição Estadual')),
                ('nome_do_gestor', models.CharField(default='', max_length=255, verbose_name='Nome do Gestor')),
                ('rg_gestor', models.CharField(default='', max_length=20, unique=True, verbose_name='RG do Gestor')),
                ('cpf_gestor', models.CharField(default='', max_length=14, unique=True, verbose_name='CPF do Gestor')),
                ('endereco_residencial', models.CharField(default='', max_length=255, verbose_name='Endereço Residencial')),
                ('data_nascimento_gestor', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento do Gestor')),
                ('cargo_gestor', models.CharField(default='', max_length=255, verbose_name='Cargo do Gestor')),
                ('unidade_executora', models.CharField(default='', max_length=255, verbose_name='Unidade Executora')),
                ('nome_responsavel', models.CharField(default='', max_length=255, verbose_name='Nome do Responsável')),
                ('funcao_responsavel', models.CharField(default='', max_length=255, verbose_name='Função do Responsável')),
                ('rg_responsavel', models.CharField(default='', max_length=20, unique=True, verbose_name='RG do Responsável')),
                ('cpf_responsavel', models.CharField(default='', max_length=14, unique=True, verbose_name='CPF do Responsável')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates whether the user has confirmed their email address.', verbose_name='email verified')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.client', verbose_name='client')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmailVerification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('is_active', models.BooleanField(default=True, verbose_name='Está ativo')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.client', verbose_name='Cliente')),
            ],
        ),
        migrations.CreateModel(
            name='Victim',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('name', models.CharField(max_length=48, verbose_name='Nome')),
                ('social_name', models.CharField(blank=True, max_length=48, null=True, verbose_name='Nome Social')),
                ('cpf', models.CharField(max_length=14, unique=True, verbose_name='CPF')),
                ('birth_date', models.DateField(max_length=60, verbose_name='Data de Nascimento (DD/MM/AAAA)')),
                ('postcode', models.CharField(max_length=9, verbose_name='CEP')),
                ('address', models.CharField(max_length=60, verbose_name='Endereço')),
                ('neighborhood', models.CharField(max_length=30, verbose_name='Bairro')),
                ('city', models.CharField(max_length=30, verbose_name='Cidade')),
                ('federated_unit', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=2, verbose_name='UF')),
                ('complement', models.CharField(blank=True, max_length=60, null=True, verbose_name='Complemento')),
                ('phone_number', models.CharField(max_length=60, verbose_name='Telefone')),
                ('civil_status', models.CharField(choices=[('S', 'Solteira'), ('M', 'Casada'), ('W', 'Viúva'), ('J', 'Separada Judicialmente'), ('D', 'Divorciada'), ('C', 'União Estável')], max_length=1, verbose_name='Estado Civil')),
                ('spouse', models.CharField(blank=True, max_length=60, null=True, verbose_name='Nome do Cônjuge')),
                ('social_benefit', models.BooleanField(verbose_name='Benefício Social')),
                ('gender', models.CharField(choices=[('M', 'Homem'), ('F', 'Mulher'), ('T', 'Travesti'), ('W', 'Mulher Transexual')], max_length=1, verbose_name='Identidade de Gênero')),
                ('race', models.CharField(choices=[('W', 'Branco(a)'), ('M', 'Pardo(a)'), ('B', 'Negro(a)'), ('A', 'Amarelo(a)'), ('I', 'Indígena')], max_length=1, verbose_name='Raça')),
                ('sexual_orientation', models.CharField(choices=[('M', 'Héterossexual'), ('F', 'Bissexual'), ('H', 'Homossexual'), ('O', 'Outro')], max_length=1, verbose_name='Orientação Sexual')),
                ('education', models.CharField(choices=[('NA', 'Não Alfabetizada'), ('EF', 'Ensino Fundamental'), ('EM', 'Ensino Médio'), ('CT', 'Curso Tecnólogo'), ('ES', 'Ensino Superior'), ('PG', 'Pós Graduação'), ('CTP', 'Curso Técnico Profissionalizante'), ('EJA', 'EJA / Projovem e Afins')], max_length=4, verbose_name='Escolaridade')),
                ('occupation', models.CharField(choices=[('AUT', 'Autônoma'), ('EMP', 'Empregada'), ('DES', 'Desempregada'), ('DL', 'Do Lar'), ('AP', 'Aposentada/Pensionista')], max_length=4, verbose_name='Situação Ocupacional')),
                ('profession', models.CharField(max_length=60, verbose_name='Ocupação/Profissão')),
                ('work_status', models.CharField(choices=[('CTPS', 'Trabalhadora com CTPS'), ('SCTPS', 'Trabalhadora sem CTPS'), ('SP', 'Servidora Pública'), ('MIL', 'Militar'), ('CPS', 'Com Previdência Social'), ('SPS', 'Sem Previdência Social'), ('BPC', 'Benefício de Prestação Continuada')], max_length=5, verbose_name='Situação Trabalhista')),
                ('income', models.CharField(choices=[('M1SM', 'Menor de 1 SM'), ('1A3SM', 'de 1 a 3 SM'), ('3A6SM', 'Mais de 3 a 6 SM'), ('6A9SM', 'Mais de 6 a 9 SM'), ('9SM', 'Mais de 9 SM'), ('SR', 'Sem Renda')], max_length=5, verbose_name='Renda')),
                ('children', models.CharField(choices=[('C1', '1'), ('C2', '2'), ('C3', '3'), ('C4', '4'), ('C5', '5'), ('C6', '6'), ('C7+', '7 ou mais')], max_length=4, verbose_name='Total de Filhos')),
                ('deficiency', models.CharField(choices=[('PH', 'Física'), ('AU', 'Auditiva'), ('VI', 'Visual'), ('ME', 'Mental'), ('OT', 'Outras'), ('NO', 'Nenhuma')], max_length=2, verbose_name='Apresenta alguma deficiência/síndrome?')),
                ('deficiency_reason', models.BooleanField(verbose_name='Deficiência em decorrência da violência sofrida?')),
                ('has_consulted_psychiatrist', models.BooleanField(verbose_name='Já foi atendido por psiquiatra e/ou psicólogo?')),
                ('drug_usage', models.CharField(choices=[('MA', 'Maconha'), ('CO', 'Cocaína'), ('CR', 'Crack'), ('OT', 'Outras'), ('NO', 'Nenhuma')], max_length=2, verbose_name='Faz uso de drogas ilícitas?')),
                ('license', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.license', verbose_name='Licença')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhoneActivation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('qr_code', models.CharField(max_length=40, verbose_name='QR Code')),
                ('victim', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='base.victim', verbose_name='Vítima')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Phone',
            fields=[
                ('token', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Token')),
                ('victim', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='base.victim', verbose_name='Vítima')),
            ],
        ),
        migrations.CreateModel(
            name='Aggression',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acknowledge', models.BooleanField(default=False, verbose_name='Confirmar')),
                ('type', models.CharField(choices=[('PB', 'Botão de pânico'), ('AD', 'Detecção por audio')], max_length=2)),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('victim', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.victim')),
            ],
        ),
    ]
